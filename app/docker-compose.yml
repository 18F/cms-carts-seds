version: "3.4"
services:
  ui:
    image: react:app
    build:
      context: ./react
      dockerfile: Dockerfile
    ports:
      - "81:80"
    networks:
      - backend_app
    environment:
      - API_URL=http://localhost:8000 # This is how a browser would call the api
  api-postgres:
    image: api-postgres:app
    build:
      context: ./api-postgres
      dockerfile: Dockerfile
    command: gunicorn hello_django.wsgi:application --bind 0.0.0.0:8000
    ports:
      - 8000:8000
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db # The api can address the db by its service name over the docker bridge network
      - DATABASE=postgres
    # depends_on:
    #   - db
  api-sqlserver:
    image: api-sqlserver:app
    build:
      context: ./api-sqlserver
      dockerfile: Dockerfile
    command: gunicorn hello_django.wsgi:application --bind 0.0.0.0:8001
    ports:
      - 8001:8001
    environment:
      - SQLSERVER_DB=sqlserver
      - SQLSERVER_USER=sqlserver
      - SQLSERVER_PASSWORD=sqlserver
      - SQLSERVER_HOST=db # The api can address the db by its service name over the docker bridge network
      - DATABASE=sqlserver
    # depends_on:
    #   - db
  db:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
  db_deployer:
    image: db_deployer:app
    build:
      context: ./postgres
      dockerfile: Dockerfile
      target: deployer
    command: sh run.sh
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db # The api can address the db by its service name over the docker bridge network
      - DATABASE=postgres
    volumes:
      - ./postgres/src:/app
    depends_on:
      - db
networks:
  backend_app:
    driver: bridge
