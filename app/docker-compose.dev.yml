version: "3.4"
services:
  ui:
    image: react:dev
    build:
      context: ./react
      dockerfile: Dockerfile
      target: dev
    ports:
      - "81:3000"
    networks:
      - backend_app
    environment:
      - API_URL=http://localhost:8000 # This is how a browser would call the api
      - CHOKIDAR_USEPOLLING=true
    stdin_open: true
    volumes:
      - ./react:/app
      - /app/node_modules
  api_postgres:
    image: api_postgres:dev
    build:
      context: ./api_postgres
      dockerfile: Dockerfile.dev
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - 8000:8000
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db # The api can address the db by its service name over the docker bridge network
      - DATABASE=postgres
    volumes:
      - ./api_postgres/:/usr/src/app/
    depends_on:
      - db
  api_sqlserver:
    image: api_sqlserver:dev
    build:
      context: ./api_sqlserver
      dockerfile: Dockerfile.dev
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - 8001:8000
    volumes:
      - ./api_sqlserver/:/usr/src/app/
  db:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
  db_deployer:
    image: db_deployer:dev
    build:
      context: ./postgres
      dockerfile: Dockerfile
      target: deployer
    command: sh run.sh
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db # The api can address the db by its service name over the docker bridge network
      - DATABASE=postgres
    volumes:
      - ./postgres/src:/app
    depends_on:
      - db
networks:
  backend_app:
    driver: bridge
