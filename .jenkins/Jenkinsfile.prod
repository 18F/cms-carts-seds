pipeline {
  agent { label "ec2-jnlp-slave" }
  options {
    disableConcurrentBuilds()
    quietPeriod(0)
    ansiColor('xterm')
  }
  parameters {
    choice(
      name: 'ACTION',
      choices: ['apply', 'destroy'],
      description: 'The terraform action to take; allows the destruction/cleanup of pipeline infrastructure, most commonly performed before branch deletion.'
    )
    string(
      name: 'VERSION',
      defaultValue: '',
      description: 'The version to deploy.  Versions are published by development pipelines and indicate which artifacts to deploy and what git tag to pull.  This should be a tag of format (number).(number).(number)  ex. 0.1.20',
      trim: false
    )
  }
  stages {
    stage("Prep Agent") {
      steps {
        script {
          // Set the build name
          currentBuild.displayName = env.VERSION
        }
        script {
          sh '''
            set -e

            # Update and configure the AWS CLI
            pip install --user --upgrade awscli >/dev/null
            if [ -z "${AWS_REGION}" ]; then
              AWS_REGION=`curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region`
            fi
            aws configure set region $AWS_REGION
            aws configure set output json
          '''
        }
        script {
          sh '''
            set -e

            # Install Terraform
            curl -O https://releases.hashicorp.com/terraform/0.12.24/terraform_0.12.24_linux_amd64.zip
            unzip ./terraform_0.12.24_linux_amd64.zip -d ~/.local/bin/
          '''
        }
      }
    }
    stage("Deploy Environment") {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: env.POSTGRES_CREDENTIAL_NAME, passwordVariable: 'TF_VAR_postgres_password', usernameVariable: 'TF_VAR_postgres_user')]) {
            sh '''
              set -e

              export TF_VAR_ecr_repository_url_ui=${ECR_REPOSITORY_URL_UI}
              export TF_VAR_ecr_repository_url_api=${ECR_REPOSITORY_URL_POSTGRES_API}
              export TF_VAR_application_version=${VERSION}
              export TF_VAR_vpc_name=${VPC_NAME}
              PATH=~/.local/bin:$PATH

              cd infra
              terraform init -backend-config="bucket=${APPLICATION_BUCKET}" -input=false
              if ! terraform workspace list | grep -q " $JOB_NAME$" ; then
                terraform workspace new ${JOB_NAME}
              fi
              terraform workspace select ${JOB_NAME}
              terraform plan > log_tfplan.txt
              terraform ${ACTION:-apply} -input=false -auto-approve
            '''
            dir('infra') {
              env.APPLICATION_ENDPOINT = sh(script: '~/.local/bin/terraform output application_endpoint', returnStdout: true).trim()
            }
          }
        }
      }
      post {
        always {
          script {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'infra/log*'
          }
        }
      }
    }
    stage("Test") {
      when {
        expression { env.ACTION != 'destroy' }
      }
      steps {
        script {
          sh '''
            set -e
            echo $APPLICATION_ENDPOINT
            cd tests
            docker build . -t loaded_testcafe:${VERSION} --build-arg application_endpoint=$APPLICATION_ENDPOINT
            docker run --rm --name ${JOB_NAME} -e APPLICATION_ENDPOINT=$APPLICATION_ENDPOINT loaded_testcafe:${VERSION} chromium /tests/**/*.js
          '''
        }
      }
    }
  }
  post {
    success {
      script {
        withCredentials([usernameColonPassword(credentialsId: 'GIT_CREDENTIAL', variable: 'GIT_CREDENTIAL')]) {
          if (env.ACTION != "destroy") {
            sh '''
              set -e
              remote_url=`git config remote.origin.url | sed -e 's|^https://||'`
              git config user.name 'Jenkins'
              git config user.email 'jenkins@mycompany.com'
              git tag $JOB_NAME -f
              git push https://$GIT_CREDENTIAL@$remote_url refs/tags/$JOB_NAME -f
            '''
            if (env.DOWNSTREAM_JOB) {
              build job: "${DOWNSTREAM_JOB}",
                parameters: [
                  string(name: 'VERSION', value: "${VERSION}")
                ],
                wait: false
            }
          }
        }
      }
    }
  }
}
